<rss version="2.0">
<channel>
	<title>Blog feed</title>
	<link>https://0x1d107.xyz/feed.xml</link>
	<description>Blog feed</description>
	<item>
		<title>Screen tearing with X11 and AMD GPU</title>
		<link>https://0x1d107.xyz/amd-x11.html</link>
		<description><![CDATA[<h1 id="x11-screen-tearing-when-using-amd-gpu">X11 screen tearing when using AMD GPU</h1>

<p>Create file in <code>&#47;etc&#47;X11&#47;xorg.conf.d&#47;20-amdgpu.conf</code> with content</p>

<pre><code>Section "Device"
    Identifier "AMD Graphics"
    Driver "amdgpu"
    Option "TearFree" "true"
EndSection
</code></pre>

<p>To enable <code>TearFree</code> temporarily, run</p>

<pre><code>xrandr --output output --set TearFree on
</code></pre>

<p>Source: <a href="https://wiki.archlinux.org/title/AMDGPU#Tear_free_rendering">archwiki</a></p>

<h2 id="see-also">See also</h2>

<ul>
<li><a href="https://davejansen.com/quick-how-to-fix-screen-tearing-in-ubuntu-with-amd-gpus/">https:&#47;&#47;davejansen.com&#47;quick-how-to-fix-screen-tearing-in-ubuntu-with-amd-gpus&#47;</a></li>
</ul>]]></description>
		<pubDate>Thu, 20 Apr 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/amd-x11.html</guid>
	</item>
	<item>
		<title>Configuring LSP in NeoVim</title>
		<link>https://0x1d107.xyz/nvim-lsp.html</link>
		<description><![CDATA[<h1 id="configuirng-language-server-completion-in-neovim">Configuirng Language Server Completion in NeoVim</h1>

<p>In this tutorial we&#8217;re going to configure autocompletion in NeoVim, using Language Server Protocol.</p>

<h2 id="packer.nvim">packer.nvim</h2>

<p>For easier further configuration we need to install Packer plugin manager by cloning the
<a href="https://github.com/wbthomason/packer.nvim">repository</a> somewhere in the <code>packpath</code>.</p>

<pre><code class="language-bash">git clone --depth 1 https:&#47;&#47;github.com&#47;wbthomason&#47;packer.nvim ~&#47;.local&#47;share&#47;nvim&#47;site&#47;pack&#47;packer&#47;start&#47;packer.nvim
</code></pre>

<p>Then create <code>~&#47;.config&#47;nvim&#47;lua&#47;plugins.lua</code> where we&#8217;ll specify all plugins that need to be
installed.</p>

<pre><code class="language-lua">-- plugins.lua
vim.cmd [[packadd packer.nvim]]
return require(&#39;packer&#39;).startup(function(use)
    use &#39;wbthomason&#47;packer.nvim&#39;
    --completion
    use &#39;neovim&#47;nvim-lspconfig&#39;
    use &#39;hrsh7th&#47;cmp-nvim-lsp&#39;
    use &#39;hrsh7th&#47;nvim-cmp&#39;
    use &#39;hrsh7th&#47;cmp-vsnip&#39;
    use &#39;hrsh7th&#47;vim-vsnip&#39;
    use "rafamadriz&#47;friendly-snippets"
end)
</code></pre>

<p>Now add the following line at the beginning of the <code>~&#47;.config&#47;nvim&#47;init.vim</code>.</p>

<pre><code class="language-vim">lua require(&#39;plugins&#39;)
</code></pre>

<p>To reload configuration, restart neovim. Packer.nvim provides commands for package managment.
Now run <code>:PackerSync</code> to install and compile plugins specified in <code>plugins.lua</code>. Restart neovim
again to load the installed plugins. </p>

<h2 id="nvim-cmp">nvim-cmp</h2>

<p>To make configuration of autocompletion easier, create <code>~&#47;.config&#47;nvim&#47;lua&#47;completion.lua</code>, where
the configuration of completion server will be stored. </p>

<pre><code class="language-lua">local cmp = require(&#39;cmp&#39;)
cmp.setup({
    snippet = {
    expand = function(args)
    --only for vsnip
        vim.fn[&#39;vsnip#anonymous&#39;](args.body)
    end
    },
    mapping = cmp.mapping.preset.insert({
      [&#39;&#60;C-b&#62;&#39;] = cmp.mapping.scroll_docs(-4),
      [&#39;&#60;C-f&#62;&#39;] = cmp.mapping.scroll_docs(4),
      [&#39;&#60;C-Space&#62;&#39;] = cmp.mapping.complete(),
      [&#39;&#60;C-e&#62;&#39;] = cmp.mapping.abort(),
      [&#39;&#60;CR&#62;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
    {name=&#39;nvim_lsp&#39;},
    {name=&#39;vsnip&#39;}
    })
})
local capabilities = require(&#39;cmp_nvim_lsp&#39;).default_capabilities(vim.lsp.protocol.make_client_capabilities())
local lspconfig = require(&#39;lspconfig&#39;)
-- example server configuration
lspconfig.clangd.setup{capabilities=capabilities}
lspconfig.jedi_language_server.setup{capabilities=capabilities}
lspconfig.rust_analyzer.setup{capabilities=capabilities}
</code></pre>

<p>Refer to <a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md">lspconfig documentation</a> for example configuration of particular language servers.
Make sure that the language server is installed in your system. </p>

<p>Don&#8217;t forget to add the module to the <code>init.vim</code></p>

<pre><code class="language-vim">lua require(&#39;plugins&#39;)
lua require(&#39;completion&#39;)
</code></pre>

<p>Now you can restart neovim once again to apply the configuration. When editing the appropriate
filetype you&#8217;ll see a popup menu with autocompletion (<code>Ctrl-Space</code> to force completion) that you can confirm by pressing <code>Enter</code>.
Select completion variant with <code>Ctrl-N</code> and <code>Ctrl-P</code>.</p>]]></description>
		<pubDate>Wed, 05 Apr 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/nvim-lsp.html</guid>
	</item>
	<item>
		<title>MathML rendering test</title>
		<link>https://0x1d107.xyz/test-mathml.html</link>
		<description><![CDATA[<h1 id="mathml-rendering">MathML rendering</h1>

<p><a href="https://www.w3.org/Math/">MathML</a> is a XML-based mathematical markup language for describing mathematical 
notations.</p>

<ul>
<li>$\displaystyle \int x<sup>{n}</sup> d x=\cfrac{x<sup>{n+1}}{n+1}+C\quad(n</sup> \in R, n \neq-1 ; x \in R)$</li>
<li>$\displaystyle \int \cfrac{d x}{x}=\ln |x|+C(n=-1, x \neq 0)$.</li>
<li>$\displaystyle \int a<sup>{x}</sup> d x=\cfrac{a<sup>{x}}{\ln</sup> a}+C(a&#62;0, a \neq 1 ; x \in R) ; $</li>
<li>$\displaystyle \int e<sup>{x}</sup> d x=e<sup>{x}+C$.</sup></li>
<li>$\displaystyle \int \cos x d x=\sin x+C(x \in R)$;</li>
<li>$\displaystyle \int \sin x d x=-\cos x+C(x \in R)$;</li>
<li>$\displaystyle \int \cfrac{d x}{\cos <sup>{2}</sup> x}=\operatorname{tg} x+C\left(x \neq \cfrac{\pi}{2}+\pi n, n \in Z\right)$;</li>
<li>$\displaystyle \int \cfrac{d x}{\sin <sup>{2}</sup> x}=-\operatorname{ctg} x+C(x \neq \pi n, n \in Z)$.</li>
<li>$\displaystyle \int \cfrac{d x}{x<sup>{2}-a<sup>{2}}=\cfrac{1}{2</sup></sup> a} \ln \left|\cfrac{x-a}{x+a}\right|+C(x \neq \pm a)$</li>
<li>$\displaystyle \int \cfrac{d x}{x<sup>{2}+a<sup>{2}}=\cfrac{1}{a}</sup></sup> \arctan \left(\cfrac{x}{a}\right)+C$.</li>
<li>$\displaystyle \int \cfrac{d x}{\sqrt{a<sup>{2}-x<sup>{2}}}=\left{\begin{array}{l}\arcsin</sup></sup> \cfrac{x}{a}+C \\ -\arccos \cfrac{x}{a}+C\end{array}(|x|&#60; a) ;\right.$ </li>
<li>$\displaystyle \int \operatorname{ch} x d x=\operatorname{sh} x+C(x \in R) ; \quad$</li>
<li>$\displaystyle \int \operatorname{sh} x d x=\operatorname{ch} x+C \quad(x \in R)$;</li>
<li>$\displaystyle \int \cfrac{d x}{\operatorname{ch}<sup>{2}</sup> x}=\operatorname{th} x+C(x \in R)$</li>
<li>$\displaystyle \int \cfrac{d x}{\operatorname{sh}<sup>{2}</sup> x}=\operatorname{cth} x+C(x \neq 0)$.</li>
</ul>

<h2 id="mathml-on-the-blog">Mathml on the blog</h2>

<p>I&#8217;ve written custom postprocessor for lowdown html output. 
It uses <a href="https://pygments.org">pygments</a> to highlight code and
<a href="https://github.com/roniemartinez/latex2mathml">latex2mathml</a> to convert latex to mathml.</p>

<p>Right now postprocessing really slows down processing of a single file compared to pure lowdown.
And pandoc doesn&#8217;t respect the <code>\displaystyle</code> command. Maybe later I&#8217;ll switch to another markdown
processor.</p>]]></description>
		<pubDate>Tue, 21 Mar 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/test-mathml.html</guid>
	</item>
	<item>
		<title>Lazy index generation for txt.log</title>
		<link>https://0x1d107.xyz/lazy-index.html</link>
		<description><![CDATA[<h1 id="lazy-index">Lazy index</h1>

<p>Inspired by <a href="http://alexey.shpakovsky.ru/en/lazyblog.html">lazyblog</a> and
<a href="https://github.com/cfenollosa/bashblog">bashblog</a>.
 Like in bashblog, the script still has to regenerate index page. But it regenerates it quickly
 simply by combining pre-generated index entries in files, sorted by name. That way we can order
 blog posts by <code>date</code> field in markdown file.
When each markdown file is processed, <code>lazyidx.sh</code> script generates file that contains appropriate <code>tr</code> table
row of index.html. At the end, all index entries are concatenated in the reverse order of file
names. These &#8220;row files&#8221; are named in the format <code>$date.$html.idx.html</code>, so we are effectively
sorting by date. </p>

<p><code>lazyidx.sh</code> also generates directories for each tag, where the script symlinks the &#8220;row file&#8221;.
So generation of indices is a pretty simple task afterwards.</p>

<h2 id="site-generation-speed">Site generation speed</h2>

<p>These measurements depend on the hardware you&#8217;re running the script at 
(specifically the hard drive and cpu). Using a blog with 158 markdown files and a single parallel
job initial generation takes about 2 seconds.</p>

<pre><code>anonyamous@localhost$ time make -j1

real    0m2.195s
user    0m1.718s
sys     0m0.356s
</code></pre>

<p>Now if we add a new article, generation will take less than a second.</p>

<pre><code>anonyamous@localhost$ vim article.md
anonyamous@localhost$ time make -j1
real    0m0.181s
user    0m0.095s
sys     0m0.024s
</code></pre>

<p>And if we increase number of parallel jobs, full generation time is about 0.4 seconds.</p>

<pre><code>anonyamous@localhost$ time make -j6
real    0m0.397s
user    0m1.781s
sys     0m0.403s
</code></pre>]]></description>
		<pubDate>Fri, 03 Mar 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/lazy-index.html</guid>
	</item>
	<item>
		<title>Wireguard VPN setup</title>
		<link>https://0x1d107.xyz/wireguard.html</link>
		<description><![CDATA[<h1 id="wireguard-vpn-setup">Wireguard VPN setup</h1>

<p>Here and later I&#8217;ll be using debian names for packages. If you use other distributions, adapt the
package names accordingly.</p>

<h2 id="wireguard-setup">Wireguard setup</h2>

<p>For userland utilities install <code>wireguard-tools</code> package. The package provides <code>wg</code> utility for
configuration of wireguard interfaces and <code>wg-quick</code> bash script for easily bringing up the
interface. The script also sets up DNS resolver using <code>openresolv</code>.</p>

<pre><code>anonyamous@server$ sudo apt install wireguard-tools
</code></pre>

<p>First, we need to generate keys for VPN server. For security set umask to 0077 to restrict other
users&#8217; access to keys.</p>

<pre><code>anonyamous@server$ umask 0077
</code></pre>

<p>Then, we generate the server private key and derive the public key.</p>

<pre><code>anonyamous@server$ wg genkey &#62; private_key
anonyamous@server$ wg pubkey &#60; private_key &#62; public_key
</code></pre>

<p>Now we create wireguard interface configuration file <code>server.conf</code>.</p>

<pre><code class="language-ini"># Server configuration
[Interface]
Address = 10.0.0.1&#47;24 # Server address in the VPN
ListenPort = 51820    # Wireguard listening port
PrivateKey = &#60;contents of private_key file&#62;
</code></pre>

<p>Now back at the client we also need to generate a pair of keys.</p>

<pre><code>anonyamous@client$ wg genkey &#62; client_private_key
anonyamous@client$ wg pubkey &#60; client_private_key &#62; client_public_key
</code></pre>

<p>And create configuration file <code>client.conf</code> similar to the one on the server.</p>

<pre><code class="language-ini"># Client configuration
[Interface]
Address = 10.0.0.2&#47;24 # Client address in the VPN
# Client will use random port by default
PrivateKey = &#60;contents of client_private_key file&#62;
</code></pre>

<p>Now let&#8217;s get the server and the client to know each other: add <code>[Peer]</code> sections with each other&#8217;s
public keys. Server should have <em>exposed static ip address</em> for client to connect. In <code>AllowedIPs</code>
field you should specify what subnet is going to be routed to the server. 
If you want expose the client behind NAT to the VPN subnet, specify seconds between keep-alive packets in
<code>PersistentKeepalive</code> field.</p>

<pre><code class="language-ini"># Client configuration
[Interface]
Address = 10.0.0.2&#47;24 # Client address in the VPN
# Client will use random port by default
PrivateKey = &#60;contents of client_private_key file&#62;

[Peer]
PublicKey = &#60;contents of public_key file on the server&#62;
Endpoint = &#60;server ip address&#62;:51820
AllowedIPs = 0.0.0.0&#47;0 # All traffic will be routed through the server
# PersistentKeepalive = 25 # Prevent connection from closing
</code></pre>

<p>Now on the server:</p>

<pre><code class="language-ini"># Server configuration
[Interface]
Address = 10.0.0.1&#47;24 # Server address in the VPN
ListenPort = 51820    # Wireguard listening port
PrivateKey = &#60;contents of private_key file&#62;

[Peer]
PublicKey = &#60;contents of client_public_key file on the client&#62;
AllowedIPs = 10.0.0.2&#47;32 # Only traffic to 10.0.0.2 will be routed to the client
</code></pre>

<h2 id="persistence">Persistence</h2>

<p>To bring up the wireguard interface we can use <code>wg-quick</code> script that comes with 
wireguard-tools. By default <code>wg-quick</code> searches for configuration files in <code>&#47;etc&#47;wireguard&#47;</code>.
The name of the config file minus <code>.conf</code> extension will be the name of the wireguard interface.</p>

<p>Copy the config files to <code>&#47;etc&#47;wireguard&#47;</code> and bring the interface up.</p>

<p><em>NB</em>: If you configured to route all traffic to the server, configure firewall rules <em>before</em> enabling
the wireguard inteface on the client. Use <code>wg-quick down wg0</code> to bring down the interface.</p>

<pre><code># On the client
anonyamous@client$ sudo cp client.conf &#47;etc&#47;wireguard&#47;wg0.conf
anonyamous@client$ sudo wg-quick up wg0 
# On the server
anonyamous@server$ sudo cp server.conf &#47;etc&#47;wireguard&#47;wg0.conf
anonyamous@server$ sudo wg-quick up wg0
</code></pre>

<p>On the server we probably want the interface to be brought up on boot. On debian, <code>wireguard-tools</code>
package has a systemd service file for wg-quick. Interface is specified in the instance name of the
service (this is the string between the first &#8220;@&#8221; character and the type suffix).</p>

<pre><code>anonyamous@server$ sudo systemctl enable --now wg-quick@wg0.service
</code></pre>

<h2 id="firewall-rules-ufw">Firewall rules (UFW)</h2>

<p>Debian cloud image I use comes with UFW preinstalled. Otherwise, it can be installed with</p>

<pre><code>anonyamous@server$ sudo apt install ufw
</code></pre>

<p>First we need to allow udp connections on our wireguard port.</p>

<pre><code>anonyamous@server$ sudo ufw allow 51820&#47;udp
</code></pre>

<p>Next backup and edit <code>&#47;etc&#47;ufw&#47;before.rules</code> to allow forwarding traffic from&#47;to wireguard interface.
Find <code>*filter</code> chain and add these rules after comment <code># End required lines</code>.</p>

<pre><code>-A ufw-before-forward -i wg0 -j ACCEPT
-A ufw-before-forward -o wg0 -j ACCEPT
</code></pre>

<p>In <code>&#47;etc&#47;sysctl.conf</code> uncomment the following lines to enable forwarding in the kernel</p>

<pre><code>net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
</code></pre>

<p>Reload the configuration</p>

<pre><code>anonyamous@server$ sudo sysctl -p
</code></pre>

<p>To allow ip-forwarding in ufw uncomment in <code>&#47;etc&#47;ufw&#47;sysctl.conf</code></p>

<pre><code>net&#47;ipv4&#47;ip_forward=1
net&#47;ipv6&#47;conf&#47;default&#47;forwarding=1
net&#47;ipv6&#47;conf&#47;all&#47;forwarding=1
</code></pre>

<p>To make the forwarded traffic look like it was sent from the server add a MASRQUERADE rule to NAT
chain. At the end of <code>&#47;etc&#47;ufw&#47;before.rules</code> append </p>

<pre><code>*nat
:POSTROUTING ACCEPT [0:0]

-A POSTROUTING -s 10.0.0.0&#47;24 -o enp1s0 -j MASQUERADE 
# substitute enp1s0 with your network interface ( ip link )

COMMIT
</code></pre>

<p>Now diff of backup and new config should look like that</p>

<pre><code class="language-diff">anonyamous@server$ sudo diff -c8 &#47;etc&#47;ufw&#47;before.rules.20230125_150929 &#47;etc&#47;ufw&#47;before.rules
*** &#47;etc&#47;ufw&#47;before.rules.20230125_150929   2020-11-28 19:02:12.000000000 +0000
--- &#47;etc&#47;ufw&#47;before.rules   2023-01-30 10:49:47.689204778 +0000
***************
*** 11,26 ****
--- 11,29 ----
  # Don&#39;t delete these required lines, otherwise there will be errors
  *filter
  :ufw-before-input - [0:0]
  :ufw-before-output - [0:0]
  :ufw-before-forward - [0:0]
  :ufw-not-local - [0:0]
  # End required lines

+ # Enable forwarding on wireguard interface
+ -A ufw-before-forward -i wg0 -j ACCEPT
+ -A ufw-before-forward -o wg0 -j ACCEPT

  # allow all on loopback
  -A ufw-before-input -i lo -j ACCEPT
  -A ufw-before-output -o lo -j ACCEPT

  # quickly process packets for which we already have a connection
  -A ufw-before-input -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
  -A ufw-before-output -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
***************
*** 68,75 ****
--- 71,87 ----
  -A ufw-before-input -p udp -d 224.0.0.251 --dport 5353 -j ACCEPT

  # allow MULTICAST UPnP for service discovery (be sure the MULTICAST line above
  # is uncommented)
  -A ufw-before-input -p udp -d 239.255.255.250 --dport 1900 -j ACCEPT

  # don&#39;t delete the &#39;COMMIT&#39; line or these rules won&#39;t be processed
  COMMIT
+
+ *nat
+ :POSTROUTING ACCEPT [0:0]
+
+ # Masquerade IPs from 10.0.0.0&#47;24 subnet see: man ufw-framework
+
+ -A POSTROUTING -s 10.0.0.0&#47;24 -o enp1s0 -j MASQUERADE
+
+ COMMIT
</code></pre>

<p>Restart ufw to apply changes</p>

<pre><code>anonyamous@server$ sudo systemctl restart ufw
</code></pre>

<h2 id="socks5-proxy">SOCKS5 proxy</h2>

<p>For socks proxy I use dante. Edit <code>&#47;etc&#47;danted.conf</code> and
set internal and exernal ip addresses.</p>

<pre><code>external: &#60;ip address here&#62;
# Be available only from vpn.
internal: wg0 port=1080
# no auth
socksmethod: none
clientmethod: none
socks pass{
    from:10.0.0.0&#47;24 to: 0.0.0.0&#47;0
    protocol: tcp udp
}
</code></pre>

<h2 id="systemd-strikes-again">Systemd strikes again</h2>

<p>There&#8217;s still a problem with service starting order. Dante should start after wg-quick
brings up the interface. 
To fix it run <code>systemctl edit danted</code></p>

<pre><code class="language-ini">[Unit]
Requires=wg-quick@wg0.service
After=wg-quick@wg0.service
</code></pre>]]></description>
		<pubDate>Wed, 15 Feb 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/wireguard.html</guid>
	</item>
	<item>
		<title>Contacts an other personal info</title>
		<link>https://0x1d107.xyz/contacts.html</link>
		<description><![CDATA[<h1 id="about-me">About me</h1>

<p>Hi. I&#8217;m 0x1d107, a hobbyist developer,<del>constant procrastinator</del> and a linux user. Used to make a lot of tiny pet projects in
my free time. They&#8217;re mostly unfinished and abandoned, but I&#8217;ve learnt a lot while making
them. </p>

<h2 id="interests">Interests</h2>

<ul>
<li>linux and other UNIX-like systems</li>
<li>math</li>
<li>cooking</li>
</ul>

<h2 id="programming-languages">Programming languages</h2>

<ul>
<li>Python</li>
<li>C</li>
<li>C++ (a bit)</li>
<li>Rust ( Learning )</li>
<li>Java&#47;Kotlin (a bit, for android development)</li>
<li>Esolangs ;) </li>
</ul>

<h2 id="contacts">Contacts</h2>

<table>
<thead>
<tr>
<th>service</th>
<th>contact</th>
</tr>
</thead>

<tbody>
<tr>
<td>email</td>
<td>yablinchik {at} gmail [dot] com</td>
</tr>
<tr>
<td>telegram</td>
<td><a href="https://t.me/dev_stdout">@dev_stdout</a></td>
</tr>
<tr>
<td>matrix</td>
<td><a href="https://matrix.to/#/@0x1d107:matrix.org">@0x1d107:matrix.org</a></td>
</tr>
</tbody>
</table>]]></description>
		<pubDate>Tue, 14 Feb 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/contacts.html</guid>
	</item>
	<item>
		<title>New blog, again</title>
		<link>https://0x1d107.xyz/new-blog.html</link>
		<description><![CDATA[<h1 id="new-blog">New blog</h1>

<p>Hi. This is my new blog. Again. Here I&#8217;ll post some how-to&#8217;s and description of my projects.
Probably. I hope won&#8217;t abandon it again. </p>

<h2 id="microblog">Microblog</h2>

<p>If you want to read shorter chaotic twitter-like posts, you can also follow my rss-only feed:
<a href="http://0x1d107.xyz/0x1d107.xml">http:&#47;&#47;0x1d107.xyz&#47;0x1d107.xml</a>. Here I share the links to projects of my interest and other
stuff. warning: contains swearing and russian language.</p>

<h2 id="about-the-blog-generator">About the blog generator</h2>

<p>update: I&#8217;ve published the repo <a href="https://github.com/0x1d107/txtlog">here</a>.</p>

<p>The main part of the blog generator is just a makefile. Make tracks files that changed and generates
the repective html output. For markdown to html conversion I use
<a href="https://kristaps.bsd.lv/lowdown/">lowdown</a> translator. As for the two &#8220;dynamic&#8221; files, <code>index.html</code>
and the rss feed, they are generated using shell scripts with here-docs as templates. I think it
works well enough for this case and it doesn&#8217;t require a whole macro processor, like m4 or php.</p>

<p>Later, I&#8217;ll add formula convertion from LaTeX to MathML at the generation stage. For now, something
like <a href="https://temml.org/index.html">Temml</a> would do the job client-side.</p>]]></description>
		<pubDate>Sat, 07 Jan 2023 00:00:00 +0500</pubDate>
		<guid>https://0x1d107.xyz/new-blog.html</guid>
	</item>
</channel>
</rss>
